#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILENAME "library.dat"

typedef struct {
    char title[100];
    char author[100];
    int id;
} Book;

void addBook();
void viewBooks();
void searchBook();
void deleteBook();

int main() {
    int choice;
    while (1) {
        printf("\nLibrary Management System\n");
        printf("1. Add Book\n");
        printf("2. View Books\n");
        printf("3. Search Book\n");
        printf("4. Delete Book\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to consume newline character

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                viewBooks();
                break;
            case 3:
                searchBook();
                break;
            case 4:
                deleteBook();
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}

void addBook() {
    FILE *file = fopen(FILENAME, "ab");
    if (!file) {
        printf("Unable to open file!\n");
        return;
    }

    Book book;
    printf("Enter book ID: ");
    scanf("%d", &book.id);
    getchar(); // to consume newline character
    printf("Enter book title: ");
    fgets(book.title, sizeof(book.title), stdin);
    strtok(book.title, "\n"); // remove newline character
    printf("Enter book author: ");
    fgets(book.author, sizeof(book.author), stdin);
    strtok(book.author, "\n"); // remove newline character

    fwrite(&book, sizeof(Book), 1, file);
    fclose(file);

    printf("Book added successfully!\n");
}

void viewBooks() {
    FILE *file = fopen(FILENAME, "rb");
    if (!file) {
        printf("Unable to open file!\n");
        return;
    }

    Book book;
    printf("\nBooks in the library:\n");
    while (fread(&book, sizeof(Book), 1, file)) {
        printf("ID: %d, Title: %s, Author: %s\n", book.id, book.title, book.author);
    }
    fclose(file);
}

void searchBook() {
    FILE *file = fopen(FILENAME, "rb");
    if (!file) {
        printf("Unable to open file!\n");
        return;
    }

    char title[100];
    printf("Enter book title to search: ");
    fgets(title, sizeof(title), stdin);
    strtok(title, "\n"); // remove newline character

    Book book;
    int found = 0;
    while (fread(&book, sizeof(Book), 1, file)) {
        if (strcmp(book.title, title) == 0) {
            printf("Book found! ID: %d, Title: %s, Author: %s\n", book.id, book.title, book.author);
            found = 1;
            break;
        }
    }
    fclose(file);

    if (!found) {
        printf("Book not found!\n");
    }
}

void deleteBook() {
    FILE *file = fopen(FILENAME, "rb");
    if (!file) {
        printf("Unable to open file!\n");
        return;
    }

    char title[100];
    printf("Enter book title to delete: ");
    fgets(title, sizeof(title), stdin);
    strtok(title, "\n"); // remove newline character

    FILE *tempFile = fopen("temp.dat", "wb");
    if (!tempFile) {
        printf("Unable to open temporary file!\n");
        fclose(file);
        return;
    }

    Book book;
    int found = 0;
    while (fread(&book, sizeof(Book), 1, file)) {
        if (strcmp(book.title, title) != 0) {
            fwrite(&book, sizeof(Book), 1, tempFile);
        } else {
            found = 1;
        }
    }
    fclose(file);
    fclose(tempFile);

    remove(FILENAME);
    rename("temp.dat", FILENAME);

    if (found) {
        printf("Book deleted successfully!\n");
    } else {
        printf("Book not found!\n");
    }
}

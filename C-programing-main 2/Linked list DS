#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in the linked list
typedef struct Node {
    int data;           // Data stored in the node
    struct Node *next;  // Pointer to the next node
} Node;

// Function prototypes
Node* createNode(int data);
Node* insertAtBeginning(Node *head, int data);
void displayList(Node *head);
void freeList(Node *head);

int main() {
    Node *head = NULL;  // Initialize an empty linked list

    // Insert nodes at the beginning of the linked list
    head = insertAtBeginning(head, 10);
    head = insertAtBeginning(head, 20);
    head = insertAtBeginning(head, 30);

    // Display the linked list
    printf("Linked List: ");
    displayList(head);

    // Free memory allocated for the linked list
    freeList(head);
    head = NULL;

    return 0;
}

// Function to create a new node with given data
Node* createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        perror("Memory allocation failed");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a new node at the beginning of the linked list
Node* insertAtBeginning(Node *head, int data) {
    Node *newNode = createNode(data);
    newNode->next = head;
    return newNode;
}

// Function to display the elements of the linked list
void displayList(Node *head) {
    Node *current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Function to free the memory allocated for the linked list
void freeList(Node *head) {
    Node *current = head;
    while (current != NULL) {
        Node *temp = current;
        current = current->next;
        free(temp);
    }
}

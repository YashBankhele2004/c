#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure for stack
typedef struct {
    int items[MAX_SIZE];
    int top;
} Stack;

// Function prototypes
void initialize(Stack *s);
int isEmpty(Stack *s);
int isFull(Stack *s);
void push(Stack *s, int value);
int pop(Stack *s);
int peek(Stack *s);

int main() {
    Stack stack;
    initialize(&stack);

    // Push elements onto the stack
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    // Display the stack contents
    printf("Stack contents:\n");
    while (!isEmpty(&stack)) {
        printf("%d\n", pop(&stack));
    }

    return 0;
}

// Function to initialize the stack
void initialize(Stack *s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack *s) {
    return s->top == -1;
}

// Function to check if the stack is full
int isFull(Stack *s) {
    return s->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(Stack *s, int value) {
    if (isFull(s)) {
        printf("Stack overflow! Cannot push %d\n", value);
    } else {
        s->items[++(s->top)] = value;
        printf("Pushed %d onto the stack\n", value);
    }
}

// Function to pop an element from the stack
int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow! Cannot pop\n");
        return -1;  // Return an invalid value indicating failure
    } else {
        return s->items[(s->top)--];
    }
}

// Function to peek at the top element of the stack without popping it
int peek(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty! No top element\n");
        return -1;  // Return an invalid value indicating failure
    } else {
        return s->items[s->top];
    }
}
